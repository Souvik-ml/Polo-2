# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JRQkYI9zt9wDOka5jmxB0KPWYJ2tJAzZ
"""

!pip install ase

!pip install pymatgen

from pymatgen.io.ase import AseAtomsAdaptor

from pymatgen.core import Lattice, Structure

structure=Structure.from_file('Na3ErCl6.cif')

structure

s=Structure.from_file('Na3ErCl6.cif')
s

atoms = AseAtomsAdaptor.get_atoms(s)

atoms

for i in range(0,10):
    atoms.rattle(0.1,seed=i)
    atoms.write(f'new_{i}.vasp',format='vasp')

!pip install pyxtal

from pyxtal import pyxtal
c = pyxtal()
c.from_seed(seed='Li3ErCl6.cif', style='pyxtal')

from pyxtal.lattice import Lattice as pylat
from pymatgen.core import Composition
import numpy as np
def get_random_structures(cif_file,num_gen):
    gen_structures=[]
    structure=Structure.from_file(cif_file)
    comp=Composition(cif_file.split('.')[0]).as_dict()
    elems,frac=list(comp.keys()),list(comp.values())
    space_group=structure.get_space_group_info()[1]
    a,b,c=[np.linalg.norm(structure.lattice.matrix[i]) for i in range(3)]
    ang_1,ang_2,ang_3=structure.lattice.angles
    cell=pylat.from_para(a,b,c,ang_1,ang_2,ang_3,ltype='hexagonal')
    s= pyxtal()
    for i in range(num_gen):
        s.from_random(3, space_group, elems, frac, lattice=cell)
        atoms=s.to_ase()
        atoms.write(f'struct_{i}.vasp')

get_random_structures('Li3ErCl6.cif',5)

from pymatgen.analysis.structure_matcher import StructureMatcher

def get_unique_structures(list_structures):
    struct_match=StructureMatcher()
    match_pairs=struct_match.group_structures(list_structures)
    return match_pairs[0][0]